#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TYAJZWeb.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="tyajz")]
	public partial class TYAJZDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertDriver(Driver instance);
    partial void UpdateDriver(Driver instance);
    partial void DeleteDriver(Driver instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertInsurance(Insurance instance);
    partial void UpdateInsurance(Insurance instance);
    partial void DeleteInsurance(Insurance instance);
    partial void InsertConstructor(Constructor instance);
    partial void UpdateConstructor(Constructor instance);
    partial void DeleteConstructor(Constructor instance);
    partial void InsertEquipmentType(EquipmentType instance);
    partial void UpdateEquipmentType(EquipmentType instance);
    partial void DeleteEquipmentType(EquipmentType instance);
    partial void InsertEquipment(Equipment instance);
    partial void UpdateEquipment(Equipment instance);
    partial void DeleteEquipment(Equipment instance);
    partial void InsertUserSession(UserSession instance);
    partial void UpdateUserSession(UserSession instance);
    partial void DeleteUserSession(UserSession instance);
    #endregion
		
		public TYAJZDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["tyajzConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TYAJZDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TYAJZDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TYAJZDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TYAJZDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Driver> Drivers
		{
			get
			{
				return this.GetTable<Driver>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<Insurance> Insurances
		{
			get
			{
				return this.GetTable<Insurance>();
			}
		}
		
		public System.Data.Linq.Table<Constructor> Constructors
		{
			get
			{
				return this.GetTable<Constructor>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentType> EquipmentTypes
		{
			get
			{
				return this.GetTable<EquipmentType>();
			}
		}
		
		public System.Data.Linq.Table<Equipment> Equipments
		{
			get
			{
				return this.GetTable<Equipment>();
			}
		}
		
		public System.Data.Linq.Table<UserSession> UserSessions
		{
			get
			{
				return this.GetTable<UserSession>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Value;
		
		private EntitySet<Driver> _Drivers;
		
		private EntitySet<Constructor> _Constructors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public Category()
		{
			this._Drivers = new EntitySet<Driver>(new Action<Driver>(this.attach_Drivers), new Action<Driver>(this.detach_Drivers));
			this._Constructors = new EntitySet<Constructor>(new Action<Constructor>(this.attach_Constructors), new Action<Constructor>(this.detach_Constructors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Driver", Storage="_Drivers", ThisKey="Id", OtherKey="CategoryId")]
		public EntitySet<Driver> Drivers
		{
			get
			{
				return this._Drivers;
			}
			set
			{
				this._Drivers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Constructor", Storage="_Constructors", ThisKey="Id", OtherKey="CategoryId")]
		public EntitySet<Constructor> Constructors
		{
			get
			{
				return this._Constructors;
			}
			set
			{
				this._Constructors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Drivers(Driver entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Drivers(Driver entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_Constructors(Constructor entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Constructors(Constructor entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _PassWord;
		
		private string _RealName;
		
		private string _UserType;
		
		private System.DateTime _CreateDT;
		
		private System.DateTime _ModifiedDT;
		
		private bool _IsDeleted;
		
		private EntitySet<Driver> _Drivers;
		
		private EntitySet<Company> _Companies;
		
		private EntitySet<Constructor> _Constructors;
		
		private EntitySet<Equipment> _Equipments;
		
		private EntitySet<UserSession> _UserSessions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPassWordChanging(string value);
    partial void OnPassWordChanged();
    partial void OnRealNameChanging(string value);
    partial void OnRealNameChanged();
    partial void OnUserTypeChanging(string value);
    partial void OnUserTypeChanged();
    partial void OnCreateDTChanging(System.DateTime value);
    partial void OnCreateDTChanged();
    partial void OnModifiedDTChanging(System.DateTime value);
    partial void OnModifiedDTChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public User()
		{
			this._Drivers = new EntitySet<Driver>(new Action<Driver>(this.attach_Drivers), new Action<Driver>(this.detach_Drivers));
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			this._Constructors = new EntitySet<Constructor>(new Action<Constructor>(this.attach_Constructors), new Action<Constructor>(this.detach_Constructors));
			this._Equipments = new EntitySet<Equipment>(new Action<Equipment>(this.attach_Equipments), new Action<Equipment>(this.detach_Equipments));
			this._UserSessions = new EntitySet<UserSession>(new Action<UserSession>(this.attach_UserSessions), new Action<UserSession>(this.detach_UserSessions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassWord", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PassWord
		{
			get
			{
				return this._PassWord;
			}
			set
			{
				if ((this._PassWord != value))
				{
					this.OnPassWordChanging(value);
					this.SendPropertyChanging();
					this._PassWord = value;
					this.SendPropertyChanged("PassWord");
					this.OnPassWordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RealName
		{
			get
			{
				return this._RealName;
			}
			set
			{
				if ((this._RealName != value))
				{
					this.OnRealNameChanging(value);
					this.SendPropertyChanging();
					this._RealName = value;
					this.SendPropertyChanged("RealName");
					this.OnRealNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserType
		{
			get
			{
				return this._UserType;
			}
			set
			{
				if ((this._UserType != value))
				{
					this.OnUserTypeChanging(value);
					this.SendPropertyChanging();
					this._UserType = value;
					this.SendPropertyChanged("UserType");
					this.OnUserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDT", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDT
		{
			get
			{
				return this._CreateDT;
			}
			set
			{
				if ((this._CreateDT != value))
				{
					this.OnCreateDTChanging(value);
					this.SendPropertyChanging();
					this._CreateDT = value;
					this.SendPropertyChanged("CreateDT");
					this.OnCreateDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDT", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDT
		{
			get
			{
				return this._ModifiedDT;
			}
			set
			{
				if ((this._ModifiedDT != value))
				{
					this.OnModifiedDTChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDT = value;
					this.SendPropertyChanged("ModifiedDT");
					this.OnModifiedDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Driver", Storage="_Drivers", ThisKey="Id", OtherKey="LastModifiedUser")]
		public EntitySet<Driver> Drivers
		{
			get
			{
				return this._Drivers;
			}
			set
			{
				this._Drivers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Company", Storage="_Companies", ThisKey="Id", OtherKey="LastModifiedUser")]
		public EntitySet<Company> Companies
		{
			get
			{
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Constructor", Storage="_Constructors", ThisKey="Id", OtherKey="LastModifiedUser")]
		public EntitySet<Constructor> Constructors
		{
			get
			{
				return this._Constructors;
			}
			set
			{
				this._Constructors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Equipment", Storage="_Equipments", ThisKey="Id", OtherKey="Eq_Recorder")]
		public EntitySet<Equipment> Equipments
		{
			get
			{
				return this._Equipments;
			}
			set
			{
				this._Equipments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserSession", Storage="_UserSessions", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserSession> UserSessions
		{
			get
			{
				return this._UserSessions;
			}
			set
			{
				this._UserSessions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Drivers(Driver entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Drivers(Driver entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Constructors(Constructor entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Constructors(Constructor entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Equipments(Equipment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Equipments(Equipment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserSessions(UserSession entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserSessions(UserSession entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Driver")]
	public partial class Driver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _NO;
		
		private string _Name;
		
		private string _CertificationNO;
		
		private string _Employer;
		
		private int _CategoryId;
		
		private int _Gender;
		
		private int _BirthYear;
		
		private string _IssuingAuthority;
		
		private System.DateTime _IssueDate;
		
		private bool _IsInsurance;
		
		private bool _IsWorking;
		
		private System.DateTime _CreateDT;
		
		private System.DateTime _ModifiedDT;
		
		private bool _IsDeleted;
		
		private bool _IsPrinted;
		
		private int _LastModifiedUser;
		
		private string _Comment;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNOChanging(string value);
    partial void OnNOChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCertificationNOChanging(string value);
    partial void OnCertificationNOChanged();
    partial void OnEmployerChanging(string value);
    partial void OnEmployerChanged();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnGenderChanging(int value);
    partial void OnGenderChanged();
    partial void OnBirthYearChanging(int value);
    partial void OnBirthYearChanged();
    partial void OnIssuingAuthorityChanging(string value);
    partial void OnIssuingAuthorityChanged();
    partial void OnIssueDateChanging(System.DateTime value);
    partial void OnIssueDateChanged();
    partial void OnIsInsuranceChanging(bool value);
    partial void OnIsInsuranceChanged();
    partial void OnIsWorkingChanging(bool value);
    partial void OnIsWorkingChanged();
    partial void OnCreateDTChanging(System.DateTime value);
    partial void OnCreateDTChanged();
    partial void OnModifiedDTChanging(System.DateTime value);
    partial void OnModifiedDTChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnIsPrintedChanging(bool value);
    partial void OnIsPrintedChanged();
    partial void OnLastModifiedUserChanging(int value);
    partial void OnLastModifiedUserChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public Driver()
		{
			this._Category = default(EntityRef<Category>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NO", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NO
		{
			get
			{
				return this._NO;
			}
			set
			{
				if ((this._NO != value))
				{
					this.OnNOChanging(value);
					this.SendPropertyChanging();
					this._NO = value;
					this.SendPropertyChanged("NO");
					this.OnNOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CertificationNO", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CertificationNO
		{
			get
			{
				return this._CertificationNO;
			}
			set
			{
				if ((this._CertificationNO != value))
				{
					this.OnCertificationNOChanging(value);
					this.SendPropertyChanging();
					this._CertificationNO = value;
					this.SendPropertyChanged("CertificationNO");
					this.OnCertificationNOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employer", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Employer
		{
			get
			{
				return this._Employer;
			}
			set
			{
				if ((this._Employer != value))
				{
					this.OnEmployerChanging(value);
					this.SendPropertyChanging();
					this._Employer = value;
					this.SendPropertyChanged("Employer");
					this.OnEmployerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int NOT NULL")]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Int NOT NULL")]
		public int Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthYear", DbType="Int NOT NULL")]
		public int BirthYear
		{
			get
			{
				return this._BirthYear;
			}
			set
			{
				if ((this._BirthYear != value))
				{
					this.OnBirthYearChanging(value);
					this.SendPropertyChanging();
					this._BirthYear = value;
					this.SendPropertyChanged("BirthYear");
					this.OnBirthYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssuingAuthority", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string IssuingAuthority
		{
			get
			{
				return this._IssuingAuthority;
			}
			set
			{
				if ((this._IssuingAuthority != value))
				{
					this.OnIssuingAuthorityChanging(value);
					this.SendPropertyChanging();
					this._IssuingAuthority = value;
					this.SendPropertyChanged("IssuingAuthority");
					this.OnIssuingAuthorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueDate", DbType="DateTime NOT NULL")]
		public System.DateTime IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this.OnIssueDateChanging(value);
					this.SendPropertyChanging();
					this._IssueDate = value;
					this.SendPropertyChanged("IssueDate");
					this.OnIssueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInsurance", DbType="Bit NOT NULL")]
		public bool IsInsurance
		{
			get
			{
				return this._IsInsurance;
			}
			set
			{
				if ((this._IsInsurance != value))
				{
					this.OnIsInsuranceChanging(value);
					this.SendPropertyChanging();
					this._IsInsurance = value;
					this.SendPropertyChanged("IsInsurance");
					this.OnIsInsuranceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsWorking", DbType="Bit NOT NULL")]
		public bool IsWorking
		{
			get
			{
				return this._IsWorking;
			}
			set
			{
				if ((this._IsWorking != value))
				{
					this.OnIsWorkingChanging(value);
					this.SendPropertyChanging();
					this._IsWorking = value;
					this.SendPropertyChanged("IsWorking");
					this.OnIsWorkingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDT", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDT
		{
			get
			{
				return this._CreateDT;
			}
			set
			{
				if ((this._CreateDT != value))
				{
					this.OnCreateDTChanging(value);
					this.SendPropertyChanging();
					this._CreateDT = value;
					this.SendPropertyChanged("CreateDT");
					this.OnCreateDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDT", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDT
		{
			get
			{
				return this._ModifiedDT;
			}
			set
			{
				if ((this._ModifiedDT != value))
				{
					this.OnModifiedDTChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDT = value;
					this.SendPropertyChanged("ModifiedDT");
					this.OnModifiedDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPrinted", DbType="Bit NOT NULL")]
		public bool IsPrinted
		{
			get
			{
				return this._IsPrinted;
			}
			set
			{
				if ((this._IsPrinted != value))
				{
					this.OnIsPrintedChanging(value);
					this.SendPropertyChanging();
					this._IsPrinted = value;
					this.SendPropertyChanged("IsPrinted");
					this.OnIsPrintedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedUser", DbType="Int NOT NULL")]
		public int LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser;
			}
			set
			{
				if ((this._LastModifiedUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUser = value;
					this.SendPropertyChanged("LastModifiedUser");
					this.OnLastModifiedUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Driver", Storage="_Category", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Drivers.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Drivers.Add(this);
						this._CategoryId = value.Id;
					}
					else
					{
						this._CategoryId = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Driver", Storage="_User", ThisKey="LastModifiedUser", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Drivers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Drivers.Add(this);
						this._LastModifiedUser = value.Id;
					}
					else
					{
						this._LastModifiedUser = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Company")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Address;
		
		private string _Legal;
		
		private string _PhoneOfLegal;
		
		private string _Contactor;
		
		private string _ContactorPhone;
		
		private bool _CanProduct;
		
		private string _ProductCertNO;
		
		private bool _CanInstall;
		
		private string _InstallCertNO;
		
		private bool _CanLend;
		
		private string _LendCertNO;
		
		private string _Comment;
		
		private System.DateTime _CreateDT;
		
		private System.DateTime _ModifiedDT;
		
		private int _LastModifiedUser;
		
		private bool _IsDeleted;
		
		private EntitySet<Equipment> _Equipments;
		
		private EntitySet<Equipment> _Equipments1;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnLegalChanging(string value);
    partial void OnLegalChanged();
    partial void OnPhoneOfLegalChanging(string value);
    partial void OnPhoneOfLegalChanged();
    partial void OnContactorChanging(string value);
    partial void OnContactorChanged();
    partial void OnContactorPhoneChanging(string value);
    partial void OnContactorPhoneChanged();
    partial void OnCanProductChanging(bool value);
    partial void OnCanProductChanged();
    partial void OnProductCertNOChanging(string value);
    partial void OnProductCertNOChanged();
    partial void OnCanInstallChanging(bool value);
    partial void OnCanInstallChanged();
    partial void OnInstallCertNOChanging(string value);
    partial void OnInstallCertNOChanged();
    partial void OnCanLendChanging(bool value);
    partial void OnCanLendChanged();
    partial void OnLendCertNOChanging(string value);
    partial void OnLendCertNOChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnCreateDTChanging(System.DateTime value);
    partial void OnCreateDTChanged();
    partial void OnModifiedDTChanging(System.DateTime value);
    partial void OnModifiedDTChanged();
    partial void OnLastModifiedUserChanging(int value);
    partial void OnLastModifiedUserChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Company()
		{
			this._Equipments = new EntitySet<Equipment>(new Action<Equipment>(this.attach_Equipments), new Action<Equipment>(this.detach_Equipments));
			this._Equipments1 = new EntitySet<Equipment>(new Action<Equipment>(this.attach_Equipments1), new Action<Equipment>(this.detach_Equipments1));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Legal", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Legal
		{
			get
			{
				return this._Legal;
			}
			set
			{
				if ((this._Legal != value))
				{
					this.OnLegalChanging(value);
					this.SendPropertyChanging();
					this._Legal = value;
					this.SendPropertyChanged("Legal");
					this.OnLegalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneOfLegal", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string PhoneOfLegal
		{
			get
			{
				return this._PhoneOfLegal;
			}
			set
			{
				if ((this._PhoneOfLegal != value))
				{
					this.OnPhoneOfLegalChanging(value);
					this.SendPropertyChanging();
					this._PhoneOfLegal = value;
					this.SendPropertyChanged("PhoneOfLegal");
					this.OnPhoneOfLegalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contactor", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Contactor
		{
			get
			{
				return this._Contactor;
			}
			set
			{
				if ((this._Contactor != value))
				{
					this.OnContactorChanging(value);
					this.SendPropertyChanging();
					this._Contactor = value;
					this.SendPropertyChanged("Contactor");
					this.OnContactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactorPhone", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string ContactorPhone
		{
			get
			{
				return this._ContactorPhone;
			}
			set
			{
				if ((this._ContactorPhone != value))
				{
					this.OnContactorPhoneChanging(value);
					this.SendPropertyChanging();
					this._ContactorPhone = value;
					this.SendPropertyChanged("ContactorPhone");
					this.OnContactorPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanProduct", DbType="Bit NOT NULL")]
		public bool CanProduct
		{
			get
			{
				return this._CanProduct;
			}
			set
			{
				if ((this._CanProduct != value))
				{
					this.OnCanProductChanging(value);
					this.SendPropertyChanging();
					this._CanProduct = value;
					this.SendPropertyChanged("CanProduct");
					this.OnCanProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductCertNO", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ProductCertNO
		{
			get
			{
				return this._ProductCertNO;
			}
			set
			{
				if ((this._ProductCertNO != value))
				{
					this.OnProductCertNOChanging(value);
					this.SendPropertyChanging();
					this._ProductCertNO = value;
					this.SendPropertyChanged("ProductCertNO");
					this.OnProductCertNOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanInstall", DbType="Bit NOT NULL")]
		public bool CanInstall
		{
			get
			{
				return this._CanInstall;
			}
			set
			{
				if ((this._CanInstall != value))
				{
					this.OnCanInstallChanging(value);
					this.SendPropertyChanging();
					this._CanInstall = value;
					this.SendPropertyChanged("CanInstall");
					this.OnCanInstallChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstallCertNO", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string InstallCertNO
		{
			get
			{
				return this._InstallCertNO;
			}
			set
			{
				if ((this._InstallCertNO != value))
				{
					this.OnInstallCertNOChanging(value);
					this.SendPropertyChanging();
					this._InstallCertNO = value;
					this.SendPropertyChanged("InstallCertNO");
					this.OnInstallCertNOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanLend", DbType="Bit NOT NULL")]
		public bool CanLend
		{
			get
			{
				return this._CanLend;
			}
			set
			{
				if ((this._CanLend != value))
				{
					this.OnCanLendChanging(value);
					this.SendPropertyChanging();
					this._CanLend = value;
					this.SendPropertyChanged("CanLend");
					this.OnCanLendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LendCertNO", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LendCertNO
		{
			get
			{
				return this._LendCertNO;
			}
			set
			{
				if ((this._LendCertNO != value))
				{
					this.OnLendCertNOChanging(value);
					this.SendPropertyChanging();
					this._LendCertNO = value;
					this.SendPropertyChanged("LendCertNO");
					this.OnLendCertNOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDT", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDT
		{
			get
			{
				return this._CreateDT;
			}
			set
			{
				if ((this._CreateDT != value))
				{
					this.OnCreateDTChanging(value);
					this.SendPropertyChanging();
					this._CreateDT = value;
					this.SendPropertyChanged("CreateDT");
					this.OnCreateDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDT", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDT
		{
			get
			{
				return this._ModifiedDT;
			}
			set
			{
				if ((this._ModifiedDT != value))
				{
					this.OnModifiedDTChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDT = value;
					this.SendPropertyChanged("ModifiedDT");
					this.OnModifiedDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedUser", DbType="Int NOT NULL")]
		public int LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser;
			}
			set
			{
				if ((this._LastModifiedUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUser = value;
					this.SendPropertyChanged("LastModifiedUser");
					this.OnLastModifiedUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Equipment", Storage="_Equipments", ThisKey="Id", OtherKey="Eq_OwnerId")]
		public EntitySet<Equipment> Equipments
		{
			get
			{
				return this._Equipments;
			}
			set
			{
				this._Equipments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Equipment1", Storage="_Equipments1", ThisKey="Id", OtherKey="Eq_ProducerId")]
		public EntitySet<Equipment> Equipments1
		{
			get
			{
				return this._Equipments1;
			}
			set
			{
				this._Equipments1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Company", Storage="_User", ThisKey="LastModifiedUser", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._LastModifiedUser = value.Id;
					}
					else
					{
						this._LastModifiedUser = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Equipments(Equipment entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Equipments(Equipment entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Equipments1(Equipment entity)
		{
			this.SendPropertyChanging();
			entity.Company1 = this;
		}
		
		private void detach_Equipments1(Equipment entity)
		{
			this.SendPropertyChanging();
			entity.Company1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Insurance")]
	public partial class Insurance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Value;
		
		private EntitySet<Constructor> _Constructors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public Insurance()
		{
			this._Constructors = new EntitySet<Constructor>(new Action<Constructor>(this.attach_Constructors), new Action<Constructor>(this.detach_Constructors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Insurance_Constructor", Storage="_Constructors", ThisKey="Id", OtherKey="InsuranceId")]
		public EntitySet<Constructor> Constructors
		{
			get
			{
				return this._Constructors;
			}
			set
			{
				this._Constructors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Constructors(Constructor entity)
		{
			this.SendPropertyChanging();
			entity.Insurance = this;
		}
		
		private void detach_Constructors(Constructor entity)
		{
			this.SendPropertyChanging();
			entity.Insurance = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Constructor")]
	public partial class Constructor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Employer;
		
		private int _CategoryId;
		
		private string _CertificationNO;
		
		private string _IssuingAuthority;
		
		private int _Gender;
		
		private System.DateTime _IssueDate;
		
		private int _BirthYear;
		
		private int _InsuranceId;
		
		private string _Comment;
		
		private bool _IsPrinted;
		
		private System.DateTime _CreateDT;
		
		private System.DateTime _ModifiedDT;
		
		private int _LastModifiedUser;
		
		private bool _IsDeleted;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Insurance> _Insurance;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmployerChanging(string value);
    partial void OnEmployerChanged();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnCertificationNOChanging(string value);
    partial void OnCertificationNOChanged();
    partial void OnIssuingAuthorityChanging(string value);
    partial void OnIssuingAuthorityChanged();
    partial void OnGenderChanging(int value);
    partial void OnGenderChanged();
    partial void OnIssueDateChanging(System.DateTime value);
    partial void OnIssueDateChanged();
    partial void OnBirthYearChanging(int value);
    partial void OnBirthYearChanged();
    partial void OnInsuranceIdChanging(int value);
    partial void OnInsuranceIdChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnIsPrintedChanging(bool value);
    partial void OnIsPrintedChanged();
    partial void OnCreateDTChanging(System.DateTime value);
    partial void OnCreateDTChanged();
    partial void OnModifiedDTChanging(System.DateTime value);
    partial void OnModifiedDTChanged();
    partial void OnLastModifiedUserChanging(int value);
    partial void OnLastModifiedUserChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Constructor()
		{
			this._Category = default(EntityRef<Category>);
			this._Insurance = default(EntityRef<Insurance>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employer", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Employer
		{
			get
			{
				return this._Employer;
			}
			set
			{
				if ((this._Employer != value))
				{
					this.OnEmployerChanging(value);
					this.SendPropertyChanging();
					this._Employer = value;
					this.SendPropertyChanged("Employer");
					this.OnEmployerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int NOT NULL")]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CertificationNO", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CertificationNO
		{
			get
			{
				return this._CertificationNO;
			}
			set
			{
				if ((this._CertificationNO != value))
				{
					this.OnCertificationNOChanging(value);
					this.SendPropertyChanging();
					this._CertificationNO = value;
					this.SendPropertyChanged("CertificationNO");
					this.OnCertificationNOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssuingAuthority", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string IssuingAuthority
		{
			get
			{
				return this._IssuingAuthority;
			}
			set
			{
				if ((this._IssuingAuthority != value))
				{
					this.OnIssuingAuthorityChanging(value);
					this.SendPropertyChanging();
					this._IssuingAuthority = value;
					this.SendPropertyChanged("IssuingAuthority");
					this.OnIssuingAuthorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Int NOT NULL")]
		public int Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueDate", DbType="DateTime NOT NULL")]
		public System.DateTime IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this.OnIssueDateChanging(value);
					this.SendPropertyChanging();
					this._IssueDate = value;
					this.SendPropertyChanged("IssueDate");
					this.OnIssueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthYear", DbType="Int NOT NULL")]
		public int BirthYear
		{
			get
			{
				return this._BirthYear;
			}
			set
			{
				if ((this._BirthYear != value))
				{
					this.OnBirthYearChanging(value);
					this.SendPropertyChanging();
					this._BirthYear = value;
					this.SendPropertyChanged("BirthYear");
					this.OnBirthYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceId", DbType="Int NOT NULL")]
		public int InsuranceId
		{
			get
			{
				return this._InsuranceId;
			}
			set
			{
				if ((this._InsuranceId != value))
				{
					if (this._Insurance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInsuranceIdChanging(value);
					this.SendPropertyChanging();
					this._InsuranceId = value;
					this.SendPropertyChanged("InsuranceId");
					this.OnInsuranceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPrinted", DbType="Bit NOT NULL")]
		public bool IsPrinted
		{
			get
			{
				return this._IsPrinted;
			}
			set
			{
				if ((this._IsPrinted != value))
				{
					this.OnIsPrintedChanging(value);
					this.SendPropertyChanging();
					this._IsPrinted = value;
					this.SendPropertyChanged("IsPrinted");
					this.OnIsPrintedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDT", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDT
		{
			get
			{
				return this._CreateDT;
			}
			set
			{
				if ((this._CreateDT != value))
				{
					this.OnCreateDTChanging(value);
					this.SendPropertyChanging();
					this._CreateDT = value;
					this.SendPropertyChanged("CreateDT");
					this.OnCreateDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDT", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDT
		{
			get
			{
				return this._ModifiedDT;
			}
			set
			{
				if ((this._ModifiedDT != value))
				{
					this.OnModifiedDTChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDT = value;
					this.SendPropertyChanged("ModifiedDT");
					this.OnModifiedDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedUser", DbType="Int NOT NULL")]
		public int LastModifiedUser
		{
			get
			{
				return this._LastModifiedUser;
			}
			set
			{
				if ((this._LastModifiedUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastModifiedUserChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedUser = value;
					this.SendPropertyChanged("LastModifiedUser");
					this.OnLastModifiedUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Constructor", Storage="_Category", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Constructors.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Constructors.Add(this);
						this._CategoryId = value.Id;
					}
					else
					{
						this._CategoryId = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Insurance_Constructor", Storage="_Insurance", ThisKey="InsuranceId", OtherKey="Id", IsForeignKey=true)]
		public Insurance Insurance
		{
			get
			{
				return this._Insurance.Entity;
			}
			set
			{
				Insurance previousValue = this._Insurance.Entity;
				if (((previousValue != value) 
							|| (this._Insurance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Insurance.Entity = null;
						previousValue.Constructors.Remove(this);
					}
					this._Insurance.Entity = value;
					if ((value != null))
					{
						value.Constructors.Add(this);
						this._InsuranceId = value.Id;
					}
					else
					{
						this._InsuranceId = default(int);
					}
					this.SendPropertyChanged("Insurance");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Constructor", Storage="_User", ThisKey="LastModifiedUser", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Constructors.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Constructors.Add(this);
						this._LastModifiedUser = value.Id;
					}
					else
					{
						this._LastModifiedUser = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentType")]
	public partial class EquipmentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Prefix;
		
		private int _LimitedMonth;
		
		private EntitySet<Equipment> _Equipments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPrefixChanging(string value);
    partial void OnPrefixChanged();
    partial void OnLimitedMonthChanging(int value);
    partial void OnLimitedMonthChanged();
    #endregion
		
		public EquipmentType()
		{
			this._Equipments = new EntitySet<Equipment>(new Action<Equipment>(this.attach_Equipments), new Action<Equipment>(this.detach_Equipments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prefix", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Prefix
		{
			get
			{
				return this._Prefix;
			}
			set
			{
				if ((this._Prefix != value))
				{
					this.OnPrefixChanging(value);
					this.SendPropertyChanging();
					this._Prefix = value;
					this.SendPropertyChanged("Prefix");
					this.OnPrefixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LimitedMonth", DbType="Int NOT NULL")]
		public int LimitedMonth
		{
			get
			{
				return this._LimitedMonth;
			}
			set
			{
				if ((this._LimitedMonth != value))
				{
					this.OnLimitedMonthChanging(value);
					this.SendPropertyChanging();
					this._LimitedMonth = value;
					this.SendPropertyChanged("LimitedMonth");
					this.OnLimitedMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentType_Equipment", Storage="_Equipments", ThisKey="Id", OtherKey="Eq_Name")]
		public EntitySet<Equipment> Equipments
		{
			get
			{
				return this._Equipments;
			}
			set
			{
				this._Equipments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Equipments(Equipment entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentType = this;
		}
		
		private void detach_Equipments(Equipment entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Equipment")]
	public partial class Equipment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Eq_no;
		
		private bool _IsLocal;
		
		private int _Eq_Name;
		
		private string _Eq_Type;
		
		private string _Eq_CertNo;
		
		private System.DateTime _Eq_MadeDate;
		
		private string _Eq_MadeNo;
		
		private string _Eq_Owner;
		
		private string _Eq_InCharge;
		
		private string _Eq_Adderss;
		
		private System.Nullable<int> _Eq_OwnerId;
		
		private string _Eq_Producer;
		
		private string _Eq_SpecCertNo;
		
		private System.Nullable<int> _Eq_ProducerId;
		
		private string _Eq_RecDeskNo;
		
		private string _Eq_RecBoxNo;
		
		private string _Eq_Status;
		
		private bool _Eq_IsPrinted;
		
		private int _Eq_Recorder;
		
		private string _Eq_Comment;
		
		private System.DateTime _CreateDT;
		
		private System.DateTime _ModifiedDT;
		
		private bool _IsDeleted;
		
		private EntityRef<EquipmentType> _EquipmentType;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Company> _Company1;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEq_noChanging(string value);
    partial void OnEq_noChanged();
    partial void OnIsLocalChanging(bool value);
    partial void OnIsLocalChanged();
    partial void OnEq_NameChanging(int value);
    partial void OnEq_NameChanged();
    partial void OnEq_TypeChanging(string value);
    partial void OnEq_TypeChanged();
    partial void OnEq_CertNoChanging(string value);
    partial void OnEq_CertNoChanged();
    partial void OnEq_MadeDateChanging(System.DateTime value);
    partial void OnEq_MadeDateChanged();
    partial void OnEq_MadeNoChanging(string value);
    partial void OnEq_MadeNoChanged();
    partial void OnEq_OwnerChanging(string value);
    partial void OnEq_OwnerChanged();
    partial void OnEq_InChargeChanging(string value);
    partial void OnEq_InChargeChanged();
    partial void OnEq_AdderssChanging(string value);
    partial void OnEq_AdderssChanged();
    partial void OnEq_OwnerIdChanging(System.Nullable<int> value);
    partial void OnEq_OwnerIdChanged();
    partial void OnEq_ProducerChanging(string value);
    partial void OnEq_ProducerChanged();
    partial void OnEq_SpecCertNoChanging(string value);
    partial void OnEq_SpecCertNoChanged();
    partial void OnEq_ProducerIdChanging(System.Nullable<int> value);
    partial void OnEq_ProducerIdChanged();
    partial void OnEq_RecDeskNoChanging(string value);
    partial void OnEq_RecDeskNoChanged();
    partial void OnEq_RecBoxNoChanging(string value);
    partial void OnEq_RecBoxNoChanged();
    partial void OnEq_StatusChanging(string value);
    partial void OnEq_StatusChanged();
    partial void OnEq_IsPrintedChanging(bool value);
    partial void OnEq_IsPrintedChanged();
    partial void OnEq_RecorderChanging(int value);
    partial void OnEq_RecorderChanged();
    partial void OnEq_CommentChanging(string value);
    partial void OnEq_CommentChanged();
    partial void OnCreateDTChanging(System.DateTime value);
    partial void OnCreateDTChanged();
    partial void OnModifiedDTChanging(System.DateTime value);
    partial void OnModifiedDTChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Equipment()
		{
			this._EquipmentType = default(EntityRef<EquipmentType>);
			this._Company = default(EntityRef<Company>);
			this._Company1 = default(EntityRef<Company>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eq_no", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Eq_no
		{
			get
			{
				return this._Eq_no;
			}
			set
			{
				if ((this._Eq_no != value))
				{
					this.OnEq_noChanging(value);
					this.SendPropertyChanging();
					this._Eq_no = value;
					this.SendPropertyChanged("Eq_no");
					this.OnEq_noChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLocal", DbType="Bit NOT NULL")]
		public bool IsLocal
		{
			get
			{
				return this._IsLocal;
			}
			set
			{
				if ((this._IsLocal != value))
				{
					this.OnIsLocalChanging(value);
					this.SendPropertyChanging();
					this._IsLocal = value;
					this.SendPropertyChanged("IsLocal");
					this.OnIsLocalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eq_Name", DbType="Int NOT NULL")]
		public int Eq_Name
		{
			get
			{
				return this._Eq_Name;
			}
			set
			{
				if ((this._Eq_Name != value))
				{
					if (this._EquipmentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEq_NameChanging(value);
					this.SendPropertyChanging();
					this._Eq_Name = value;
					this.SendPropertyChanged("Eq_Name");
					this.OnEq_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eq_Type", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Eq_Type
		{
			get
			{
				return this._Eq_Type;
			}
			set
			{
				if ((this._Eq_Type != value))
				{
					this.OnEq_TypeChanging(value);
					this.SendPropertyChanging();
					this._Eq_Type = value;
					this.SendPropertyChanged("Eq_Type");
					this.OnEq_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eq_CertNo", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Eq_CertNo
		{
			get
			{
				return this._Eq_CertNo;
			}
			set
			{
				if ((this._Eq_CertNo != value))
				{
					this.OnEq_CertNoChanging(value);
					this.SendPropertyChanging();
					this._Eq_CertNo = value;
					this.SendPropertyChanged("Eq_CertNo");
					this.OnEq_CertNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eq_MadeDate", DbType="DateTime NOT NULL")]
		public System.DateTime Eq_MadeDate
		{
			get
			{
				return this._Eq_MadeDate;
			}
			set
			{
				if ((this._Eq_MadeDate != value))
				{
					this.OnEq_MadeDateChanging(value);
					this.SendPropertyChanging();
					this._Eq_MadeDate = value;
					this.SendPropertyChanged("Eq_MadeDate");
					this.OnEq_MadeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eq_MadeNo", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Eq_MadeNo
		{
			get
			{
				return this._Eq_MadeNo;
			}
			set
			{
				if ((this._Eq_MadeNo != value))
				{
					this.OnEq_MadeNoChanging(value);
					this.SendPropertyChanging();
					this._Eq_MadeNo = value;
					this.SendPropertyChanged("Eq_MadeNo");
					this.OnEq_MadeNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eq_Owner", DbType="NVarChar(100)")]
		public string Eq_Owner
		{
			get
			{
				return this._Eq_Owner;
			}
			set
			{
				if ((this._Eq_Owner != value))
				{
					this.OnEq_OwnerChanging(value);
					this.SendPropertyChanging();
					this._Eq_Owner = value;
					this.SendPropertyChanged("Eq_Owner");
					this.OnEq_OwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eq_InCharge", DbType="NVarChar(100)")]
		public string Eq_InCharge
		{
			get
			{
				return this._Eq_InCharge;
			}
			set
			{
				if ((this._Eq_InCharge != value))
				{
					this.OnEq_InChargeChanging(value);
					this.SendPropertyChanging();
					this._Eq_InCharge = value;
					this.SendPropertyChanged("Eq_InCharge");
					this.OnEq_InChargeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eq_Adderss", DbType="NVarChar(100)")]
		public string Eq_Adderss
		{
			get
			{
				return this._Eq_Adderss;
			}
			set
			{
				if ((this._Eq_Adderss != value))
				{
					this.OnEq_AdderssChanging(value);
					this.SendPropertyChanging();
					this._Eq_Adderss = value;
					this.SendPropertyChanged("Eq_Adderss");
					this.OnEq_AdderssChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eq_OwnerId", DbType="Int")]
		public System.Nullable<int> Eq_OwnerId
		{
			get
			{
				return this._Eq_OwnerId;
			}
			set
			{
				if ((this._Eq_OwnerId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEq_OwnerIdChanging(value);
					this.SendPropertyChanging();
					this._Eq_OwnerId = value;
					this.SendPropertyChanged("Eq_OwnerId");
					this.OnEq_OwnerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eq_Producer", DbType="NVarChar(100)")]
		public string Eq_Producer
		{
			get
			{
				return this._Eq_Producer;
			}
			set
			{
				if ((this._Eq_Producer != value))
				{
					this.OnEq_ProducerChanging(value);
					this.SendPropertyChanging();
					this._Eq_Producer = value;
					this.SendPropertyChanged("Eq_Producer");
					this.OnEq_ProducerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eq_SpecCertNo", DbType="NVarChar(50)")]
		public string Eq_SpecCertNo
		{
			get
			{
				return this._Eq_SpecCertNo;
			}
			set
			{
				if ((this._Eq_SpecCertNo != value))
				{
					this.OnEq_SpecCertNoChanging(value);
					this.SendPropertyChanging();
					this._Eq_SpecCertNo = value;
					this.SendPropertyChanged("Eq_SpecCertNo");
					this.OnEq_SpecCertNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eq_ProducerId", DbType="Int")]
		public System.Nullable<int> Eq_ProducerId
		{
			get
			{
				return this._Eq_ProducerId;
			}
			set
			{
				if ((this._Eq_ProducerId != value))
				{
					if (this._Company1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEq_ProducerIdChanging(value);
					this.SendPropertyChanging();
					this._Eq_ProducerId = value;
					this.SendPropertyChanged("Eq_ProducerId");
					this.OnEq_ProducerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eq_RecDeskNo", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Eq_RecDeskNo
		{
			get
			{
				return this._Eq_RecDeskNo;
			}
			set
			{
				if ((this._Eq_RecDeskNo != value))
				{
					this.OnEq_RecDeskNoChanging(value);
					this.SendPropertyChanging();
					this._Eq_RecDeskNo = value;
					this.SendPropertyChanged("Eq_RecDeskNo");
					this.OnEq_RecDeskNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eq_RecBoxNo", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Eq_RecBoxNo
		{
			get
			{
				return this._Eq_RecBoxNo;
			}
			set
			{
				if ((this._Eq_RecBoxNo != value))
				{
					this.OnEq_RecBoxNoChanging(value);
					this.SendPropertyChanging();
					this._Eq_RecBoxNo = value;
					this.SendPropertyChanged("Eq_RecBoxNo");
					this.OnEq_RecBoxNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eq_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Eq_Status
		{
			get
			{
				return this._Eq_Status;
			}
			set
			{
				if ((this._Eq_Status != value))
				{
					this.OnEq_StatusChanging(value);
					this.SendPropertyChanging();
					this._Eq_Status = value;
					this.SendPropertyChanged("Eq_Status");
					this.OnEq_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eq_IsPrinted", DbType="Bit NOT NULL")]
		public bool Eq_IsPrinted
		{
			get
			{
				return this._Eq_IsPrinted;
			}
			set
			{
				if ((this._Eq_IsPrinted != value))
				{
					this.OnEq_IsPrintedChanging(value);
					this.SendPropertyChanging();
					this._Eq_IsPrinted = value;
					this.SendPropertyChanged("Eq_IsPrinted");
					this.OnEq_IsPrintedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eq_Recorder", DbType="Int NOT NULL")]
		public int Eq_Recorder
		{
			get
			{
				return this._Eq_Recorder;
			}
			set
			{
				if ((this._Eq_Recorder != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEq_RecorderChanging(value);
					this.SendPropertyChanging();
					this._Eq_Recorder = value;
					this.SendPropertyChanged("Eq_Recorder");
					this.OnEq_RecorderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eq_Comment", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Eq_Comment
		{
			get
			{
				return this._Eq_Comment;
			}
			set
			{
				if ((this._Eq_Comment != value))
				{
					this.OnEq_CommentChanging(value);
					this.SendPropertyChanging();
					this._Eq_Comment = value;
					this.SendPropertyChanged("Eq_Comment");
					this.OnEq_CommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDT", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDT
		{
			get
			{
				return this._CreateDT;
			}
			set
			{
				if ((this._CreateDT != value))
				{
					this.OnCreateDTChanging(value);
					this.SendPropertyChanging();
					this._CreateDT = value;
					this.SendPropertyChanged("CreateDT");
					this.OnCreateDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDT", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDT
		{
			get
			{
				return this._ModifiedDT;
			}
			set
			{
				if ((this._ModifiedDT != value))
				{
					this.OnModifiedDTChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDT = value;
					this.SendPropertyChanged("ModifiedDT");
					this.OnModifiedDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentType_Equipment", Storage="_EquipmentType", ThisKey="Eq_Name", OtherKey="Id", IsForeignKey=true)]
		public EquipmentType EquipmentType
		{
			get
			{
				return this._EquipmentType.Entity;
			}
			set
			{
				EquipmentType previousValue = this._EquipmentType.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentType.Entity = null;
						previousValue.Equipments.Remove(this);
					}
					this._EquipmentType.Entity = value;
					if ((value != null))
					{
						value.Equipments.Add(this);
						this._Eq_Name = value.Id;
					}
					else
					{
						this._Eq_Name = default(int);
					}
					this.SendPropertyChanged("EquipmentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Equipment", Storage="_Company", ThisKey="Eq_OwnerId", OtherKey="Id", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Equipments.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Equipments.Add(this);
						this._Eq_OwnerId = value.Id;
					}
					else
					{
						this._Eq_OwnerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Equipment1", Storage="_Company1", ThisKey="Eq_ProducerId", OtherKey="Id", IsForeignKey=true)]
		public Company Company1
		{
			get
			{
				return this._Company1.Entity;
			}
			set
			{
				Company previousValue = this._Company1.Entity;
				if (((previousValue != value) 
							|| (this._Company1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company1.Entity = null;
						previousValue.Equipments1.Remove(this);
					}
					this._Company1.Entity = value;
					if ((value != null))
					{
						value.Equipments1.Add(this);
						this._Eq_ProducerId = value.Id;
					}
					else
					{
						this._Eq_ProducerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Company1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Equipment", Storage="_User", ThisKey="Eq_Recorder", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Equipments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Equipments.Add(this);
						this._Eq_Recorder = value.Id;
					}
					else
					{
						this._Eq_Recorder = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserSession")]
	public partial class UserSession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private int _UserId;
		
		private System.DateTime _LoginDT;
		
		private System.DateTime _LastActivityDT;
		
		private string _RemoteIP;
		
		private string _Status;
		
		private System.DateTime _CreateDT;
		
		private System.DateTime _ModifiedDT;
		
		private bool _IsDeleted;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnLoginDTChanging(System.DateTime value);
    partial void OnLoginDTChanged();
    partial void OnLastActivityDTChanging(System.DateTime value);
    partial void OnLastActivityDTChanged();
    partial void OnRemoteIPChanging(string value);
    partial void OnRemoteIPChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnCreateDTChanging(System.DateTime value);
    partial void OnCreateDTChanged();
    partial void OnModifiedDTChanging(System.DateTime value);
    partial void OnModifiedDTChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public UserSession()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginDT", DbType="DateTime NOT NULL")]
		public System.DateTime LoginDT
		{
			get
			{
				return this._LoginDT;
			}
			set
			{
				if ((this._LoginDT != value))
				{
					this.OnLoginDTChanging(value);
					this.SendPropertyChanging();
					this._LoginDT = value;
					this.SendPropertyChanged("LoginDT");
					this.OnLoginDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDT", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDT
		{
			get
			{
				return this._LastActivityDT;
			}
			set
			{
				if ((this._LastActivityDT != value))
				{
					this.OnLastActivityDTChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDT = value;
					this.SendPropertyChanged("LastActivityDT");
					this.OnLastActivityDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemoteIP", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RemoteIP
		{
			get
			{
				return this._RemoteIP;
			}
			set
			{
				if ((this._RemoteIP != value))
				{
					this.OnRemoteIPChanging(value);
					this.SendPropertyChanging();
					this._RemoteIP = value;
					this.SendPropertyChanged("RemoteIP");
					this.OnRemoteIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDT", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDT
		{
			get
			{
				return this._CreateDT;
			}
			set
			{
				if ((this._CreateDT != value))
				{
					this.OnCreateDTChanging(value);
					this.SendPropertyChanging();
					this._CreateDT = value;
					this.SendPropertyChanged("CreateDT");
					this.OnCreateDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDT", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDT
		{
			get
			{
				return this._ModifiedDT;
			}
			set
			{
				if ((this._ModifiedDT != value))
				{
					this.OnModifiedDTChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDT = value;
					this.SendPropertyChanged("ModifiedDT");
					this.OnModifiedDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserSession", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserSessions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserSessions.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
